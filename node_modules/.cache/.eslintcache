[{"/Users/nana/Desktop/twitterApp/frontend/src/index.tsx":"1","/Users/nana/Desktop/twitterApp/frontend/src/App.tsx":"2","/Users/nana/Desktop/twitterApp/frontend/src/features/register/components/RegisterModal/RegisterModal.tsx":"3","/Users/nana/Desktop/twitterApp/frontend/src/features/register/util/RegisterStepUtils.tsx":"4","/Users/nana/Desktop/twitterApp/frontend/src/features/register/components/RegisterStepCounter/RegisterationStepCounter.tsx":"5","/Users/nana/Desktop/twitterApp/frontend/src/features/register/util/RegisterModalUtils.tsx":"6","/Users/nana/Desktop/twitterApp/frontend/src/components/TextInput/TextInput.tsx":"7","/Users/nana/Desktop/twitterApp/frontend/src/pages/Landing.tsx":"8","/Users/nana/Desktop/twitterApp/frontend/src/components/ValidatedInput/ValidatedInput.tsx":"9","/Users/nana/Desktop/twitterApp/frontend/src/components/ValidatedInput/StyledInput.tsx":"10","/Users/nana/Desktop/twitterApp/frontend/src/utils/DetermineStyleUtils.ts":"11","/Users/nana/Desktop/twitterApp/frontend/src/services/Validators.ts":"12","/Users/nana/Desktop/twitterApp/frontend/src/features/register/components/RegisterDateInput/RegisterDateInput.tsx":"13","/Users/nana/Desktop/twitterApp/frontend/src/components/ValidatedInput/ValidatedDateSelector.tsx":"14","/Users/nana/Desktop/twitterApp/frontend/src/utils/DateUtils.tsx":"15","/Users/nana/Desktop/twitterApp/frontend/src/redux/Store.ts":"16","/Users/nana/Desktop/twitterApp/frontend/src/redux/Slices/RegisterSlice.ts":"17","/Users/nana/Desktop/twitterApp/frontend/src/features/register/components/RegisterNameInput/RegisterNameInput.tsx":"18","/Users/nana/Desktop/twitterApp/frontend/src/components/ValidatedInput/ValidatedTextInput.tsx":"19","/Users/nana/Desktop/twitterApp/frontend/src/features/register/components/RegisterEmailInput/RegisterEmailInputs.tsx":"20","/Users/nana/Desktop/twitterApp/frontend/src/components/Checkbox/Checkbox.tsx":"21","/Users/nana/Desktop/twitterApp/frontend/src/components/Checkbox/StyledCheckbox.tsx":"22","/Users/nana/Desktop/twitterApp/frontend/src/components/Checkbox/CheckBox.tsx":"23","/Users/nana/Desktop/twitterApp/frontend/src/components/ValidatedInput/ValidatedDisplay.tsx":"24","/Users/nana/Desktop/twitterApp/frontend/src/components/DropDown/DropDown.tsx":"25","/Users/nana/Desktop/twitterApp/frontend/src/pages/Feed.tsx":"26","/Users/nana/Desktop/twitterApp/frontend/src/components/Modal/Modal.tsx":"27","/Users/nana/Desktop/twitterApp/frontend/src/features/register/components/RegisterNextButton/RegisterNextButton.tsx":"28","/Users/nana/Desktop/twitterApp/frontend/src/features/register/components/RegisterForms/RegisterFormOne.tsx":"29","/Users/nana/Desktop/twitterApp/frontend/src/features/register/components/RegisterForms/RegisterFormThree.tsx":"30","/Users/nana/Desktop/twitterApp/frontend/src/features/register/components/RegisterForms/RegisterFormFour.tsx":"31","/Users/nana/Desktop/twitterApp/frontend/src/features/register/components/RegisterForms/RegisterFormTwo.tsx":"32","/Users/nana/Desktop/twitterApp/frontend/src/features/register/components/RegisterForms/RegisterFormFive.tsx":"33","/Users/nana/Desktop/twitterApp/frontend/src/features/register/components/RegisterForms/RegisterFormSix.tsx":"34","/Users/nana/Desktop/twitterApp/frontend/src/features/register/index.tsx":"35","/Users/nana/Desktop/twitterApp/frontend/src/redux/Slices/UserSlice.tsx":"36","/Users/nana/Desktop/twitterApp/frontend/src/features/landing/components/RightSideBar/RightSideBar.tsx":"37","/Users/nana/Desktop/twitterApp/frontend/src/features/landing/components/Buttons/GoogleButton.tsx":"38","/Users/nana/Desktop/twitterApp/frontend/src/features/landing/components/Buttons/AppleButton.tsx":"39","/Users/nana/Desktop/twitterApp/frontend/src/features/landing/components/Buttons/SignUpButton.tsx":"40","/Users/nana/Desktop/twitterApp/frontend/src/features/landing/components/Buttons/SignInButton.tsx":"41","/Users/nana/Desktop/twitterApp/frontend/src/features/landing/Index.tsx":"42","/Users/nana/Desktop/twitterApp/frontend/src/features/landing/components/LandingFooter/LandingFooter.tsx":"43","/Users/nana/Desktop/twitterApp/frontend/src/features/Login/Index.ts":"44","/Users/nana/Desktop/twitterApp/frontend/src/features/Login/LoginModal/LoginModal.tsx":"45","/Users/nana/Desktop/twitterApp/frontend/src/features/Login/LoginModalTop/LoginModalTop.tsx":"46","/Users/nana/Desktop/twitterApp/frontend/src/features/Login/LoginForms/LoginFormOne.tsx":"47","/Users/nana/Desktop/twitterApp/frontend/src/components/ModalButton/ModalButton.tsx":"48"},{"size":435,"mtime":1688446281240,"results":"49","hashOfConfig":"50"},{"size":944,"mtime":1691995085720,"results":"51","hashOfConfig":"50"},{"size":1495,"mtime":1691428434145,"results":"52","hashOfConfig":"50"},{"size":708,"mtime":1687965870690,"results":"53","hashOfConfig":"50"},{"size":560,"mtime":1689345932535,"results":"54","hashOfConfig":"50"},{"size":1459,"mtime":1691384152332,"results":"55","hashOfConfig":"50"},{"size":1020,"mtime":1687976892110,"results":"56","hashOfConfig":"57"},{"size":1318,"mtime":1691944638069,"results":"58","hashOfConfig":"50"},{"size":2319,"mtime":1688709901269,"results":"59","hashOfConfig":"57"},{"size":760,"mtime":1689955164143,"results":"60","hashOfConfig":"50"},{"size":2266,"mtime":1689186543464,"results":"61","hashOfConfig":"50"},{"size":1792,"mtime":1690361345929,"results":"62","hashOfConfig":"50"},{"size":2785,"mtime":1691392029546,"results":"63","hashOfConfig":"50"},{"size":2250,"mtime":1690281135701,"results":"64","hashOfConfig":"50"},{"size":1755,"mtime":1690389371086,"results":"65","hashOfConfig":"50"},{"size":399,"mtime":1691391724785,"results":"66","hashOfConfig":"50"},{"size":8660,"mtime":1692942918153,"results":"67","hashOfConfig":"50"},{"size":2449,"mtime":1689967003470,"results":"68","hashOfConfig":"50"},{"size":2230,"mtime":1689967470866,"results":"69","hashOfConfig":"50"},{"size":1366,"mtime":1689960234478,"results":"70","hashOfConfig":"50"},{"size":658,"mtime":1690012867578,"results":"71","hashOfConfig":"57"},{"size":873,"mtime":1690012010646,"results":"72","hashOfConfig":"50"},{"size":763,"mtime":1690708138564,"results":"73","hashOfConfig":"50"},{"size":1209,"mtime":1690186381090,"results":"74","hashOfConfig":"50"},{"size":1685,"mtime":1690389723276,"results":"75","hashOfConfig":"50"},{"size":154,"mtime":1690692428204,"results":"76","hashOfConfig":"50"},{"size":767,"mtime":1691218138925,"results":"77","hashOfConfig":"50"},{"size":5091,"mtime":1691391755685,"results":"78","hashOfConfig":"50"},{"size":1317,"mtime":1691391984772,"results":"79","hashOfConfig":"50"},{"size":2196,"mtime":1691391815129,"results":"80","hashOfConfig":"50"},{"size":3742,"mtime":1691391996884,"results":"81","hashOfConfig":"50"},{"size":1522,"mtime":1691383832397,"results":"82","hashOfConfig":"50"},{"size":1750,"mtime":1691392009764,"results":"83","hashOfConfig":"50"},{"size":3250,"mtime":1691428125734,"results":"84","hashOfConfig":"50"},{"size":104,"mtime":1691384270364,"results":"85","hashOfConfig":"50"},{"size":3164,"mtime":1691984054128,"results":"86","hashOfConfig":"50"},{"size":1857,"mtime":1691656074576,"results":"87","hashOfConfig":"50"},{"size":419,"mtime":1691512352060,"results":"88","hashOfConfig":"50"},{"size":401,"mtime":1691512269983,"results":"89","hashOfConfig":"50"},{"size":402,"mtime":1691512590727,"results":"90","hashOfConfig":"50"},{"size":398,"mtime":1691945146446,"results":"91","hashOfConfig":"50"},{"size":212,"mtime":1691519371902,"results":"92","hashOfConfig":"50"},{"size":1404,"mtime":1691517017128,"results":"93","hashOfConfig":"50"},{"size":81,"mtime":1691554712937,"results":"94","hashOfConfig":"50"},{"size":721,"mtime":1691949439358,"results":"95","hashOfConfig":"50"},{"size":747,"mtime":1691655979979,"results":"96","hashOfConfig":"50"},{"size":4641,"mtime":1693146700850,"results":"97","hashOfConfig":"50"},{"size":1035,"mtime":1691655342463,"results":"98","hashOfConfig":"50"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},"1yncqqx",{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"102"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"102"},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"fllg6r",{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"132","messages":"133","suppressedMessages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"102"},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"102"},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"146","messages":"147","suppressedMessages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"158","messages":"159","suppressedMessages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"161","messages":"162","suppressedMessages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"102"},{"filePath":"165","messages":"166","suppressedMessages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","suppressedMessages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"171","messages":"172","suppressedMessages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"174","messages":"175","suppressedMessages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"177","messages":"178","suppressedMessages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"180","messages":"181","suppressedMessages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"183","messages":"184","suppressedMessages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"102"},{"filePath":"187","messages":"188","suppressedMessages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"102"},{"filePath":"191","messages":"192","suppressedMessages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"194","messages":"195","suppressedMessages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"197","messages":"198","suppressedMessages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"102"},{"filePath":"201","messages":"202","suppressedMessages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"204","messages":"205","suppressedMessages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"102"},{"filePath":"208","messages":"209","suppressedMessages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"102"},{"filePath":"212","messages":"213","suppressedMessages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"215","messages":"216","suppressedMessages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"218","messages":"219","suppressedMessages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"102"},{"filePath":"222","messages":"223","suppressedMessages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"225","messages":"226","suppressedMessages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"228","messages":"229","suppressedMessages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"231","messages":"232","suppressedMessages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"234","messages":"235","suppressedMessages":"236","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"102"},{"filePath":"238","messages":"239","suppressedMessages":"240","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"241","messages":"242","suppressedMessages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"244","messages":"245","suppressedMessages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"102"},{"filePath":"248","messages":"249","suppressedMessages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"102"},{"filePath":"252","messages":"253","suppressedMessages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"255","messages":"256","suppressedMessages":"257","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},"/Users/nana/Desktop/twitterApp/frontend/src/index.tsx",[],[],[],"/Users/nana/Desktop/twitterApp/frontend/src/App.tsx",[],[],"/Users/nana/Desktop/twitterApp/frontend/src/features/register/components/RegisterModal/RegisterModal.tsx",["258"],[],"import React, {useEffect} from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { AppDispatch, RootState } from '../../../../redux/Store'\n\nimport { Modal } from '../../../../components/Modal/Modal'\nimport \"./RegisterModal.css\"\nimport { RegistrationStepCounter } from '../RegisterStepCounter/RegisterationStepCounter'\nimport { determineModalContent } from '../../util/RegisterModalUtils'\nimport { cleanRegisterState, decrementStep } from '../../../../redux/Slices/RegisterSlice'\nimport { RegisterNextButton} from '../RegisterNextButton/RegisterNextButton'\n\n\n\n\ninterface RegisterModalProps{\n   toggleModal: () => void;\n}\n\n\n\nexport const RegisterModal:React.FC <RegisterModalProps> = ({toggleModal} ) => {\n\n  //redux hooks to manage the states\n  const state = useSelector((state:RootState) => state.register)\n  const dispatch:AppDispatch = useDispatch();\n  \n\n\n\n  //function to change the step number using the current variable and the update variables in the hooks\n  const stepButtonClicked =  () => {\n    if(state.step ===1){\n      toggleModal();\n      return;\n    }\n      dispatch(decrementStep());\n  }\n\n\n\n\n  useEffect(() => {\n    return (() => {\n      dispatch(cleanRegisterState());\n    })\n  }, [])\n\n\n\n\n  return ( \n        <Modal  topContent={<RegistrationStepCounter step={state.step} changeStep={stepButtonClicked}/>} \n                content={determineModalContent (state.step)} \n                bottomContent={<RegisterNextButton step={state.step}/>}\n        />\n  )\n}\n\n","/Users/nana/Desktop/twitterApp/frontend/src/features/register/util/RegisterStepUtils.tsx",[],[],"/Users/nana/Desktop/twitterApp/frontend/src/features/register/components/RegisterStepCounter/RegisterationStepCounter.tsx",[],[],"/Users/nana/Desktop/twitterApp/frontend/src/features/register/util/RegisterModalUtils.tsx",["259"],[],"import React from \"react\"\n\n\nimport { RegisterFormOne } from \"../components/RegisterForms/RegisterFormOne\"\nimport { RegisterFormTwo } from \"../components/RegisterForms/RegisterFormTwo\";\nimport { RegisterFormThree } from \"../components/RegisterForms/RegisterFormThree\";\nimport { RegisterFormFour } from \"../components/RegisterForms/RegisterFormFour\";\n\nimport data from '../../../data/codes.json'\nimport { RegisterFormFive } from \"../components/RegisterForms/RegisterFormFive\";\nimport { RegisterFormSix } from \"../components/RegisterForms/RegisterFormSix\";\n\nexport const determineModalContent = (step: number):JSX.Element => {\n    switch (step) {\n        case 1: return <RegisterFormOne/>;\n        case 2: return <RegisterFormTwo/ >\n        case 3: return <RegisterFormThree/>\n        case 4: return <RegisterFormFour/>\n        case 5: return <RegisterFormFive/>\n        case 6: return <RegisterFormSix/>\n        default: return <></>\n    }\n    \n}\n\nexport const countryCodeDropdown = ():JSX.Element[] => {\n    let options = data.filter((country) => {\n        if (country.code !== \"US\"){\n             return country;\n        }\n    }).map((country) => {\n        return <option value={`${country.dial_code} ${country.name}`}\n        key={country.code}>\n            {`${country.dial_code} ${country.name}`}\n        </option>\n    })\n\n    options.unshift(\n        <option value={\"+1 United states\"} key={\"US\"}>{\"+1 United States\"}</option>\n    )\n\n    return options;\n}","/Users/nana/Desktop/twitterApp/frontend/src/components/TextInput/TextInput.tsx",["260"],[],"/Users/nana/Desktop/twitterApp/frontend/src/pages/Landing.tsx",[],[],"/Users/nana/Desktop/twitterApp/frontend/src/components/ValidatedInput/ValidatedInput.tsx",["261"],[],"/Users/nana/Desktop/twitterApp/frontend/src/components/ValidatedInput/StyledInput.tsx",[],[],"/Users/nana/Desktop/twitterApp/frontend/src/utils/DetermineStyleUtils.ts",["262","263"],[],"\nimport { StyledInputProps, ValidatedInputState } from \"./GlobalInterfaces\";\n\n\nexport const determineStyledInputBorder = (props: StyledInputProps): string =>{\n    let {active, valid, theme} = props;\n    if(!active && valid){\n        return `1px solid ${theme.colors.gray}`;\n    }\n    if(!active && !valid){\n        return `1px solid ${theme.colors.error}`;\n    }\n    if(active && valid){\n        return `2px solid ${theme.colors.blue}`;\n    }\n    if(active && !valid){\n        return `2px solid ${theme.colors.error}`;\n    }\n\n    return \" \";\n}\n\n\n\nexport const determineLabelColor = (props: StyledInputProps): string =>{\n    let {active, valid, theme, color} = props;\n    if(color && color === 'error'){\n        return theme.colors.error;\n    }\n    if(color && color === 'blue'){\n        return theme.colors.blue;\n    }\n    return theme.colors.gray\n}\n\n\nexport const determineValidatedStyles = (state: ValidatedInputState, validator:(value: string) =>boolean): ValidatedInputState =>{\n    let {valid, active, typeIn, value, labelColor, labelActive} = state;\n\n    if(typeIn){\n        valid = validator(value);\n\n        if(active && valid){\n            labelActive = true;\n            labelColor = 'blue';\n        }\n\n        if(active && !valid){\n            labelActive = true;\n            labelColor = 'error';\n        }\n        if(!active && valid){\n            labelActive = true;\n            labelColor = 'gray';\n        }\n        if(!active && !valid){\n            labelActive = false;\n            labelColor = 'gray';\n        }\n    }else{\n        if(active){\n            labelActive = true;\n            labelColor = 'blue';\n        }else{\n            labelActive = false;\n            labelColor = 'gray';\n        }\n    }\n\n    \n    state = {\n        ...state,\n        valid,\n        labelActive,\n        labelColor,\n    };\n    return state;\n}\n\n\nexport const determineValidatedSelectStyle = (active:boolean, valid:boolean): string =>{\n    if(!valid ){\n        return \"error\";\n    }\n    if(active){\n        return 'blue';\n    }\n    return 'gray';\n}\n\nexport const determineValidatedTextLabel = (active:boolean, valid:boolean):string =>{\n    if(!valid && active){\n        return 'error';\n    }\n    if(valid && active){\n        return 'blue';\n    }\n    return 'gray';\n}","/Users/nana/Desktop/twitterApp/frontend/src/services/Validators.ts",[],[],"/Users/nana/Desktop/twitterApp/frontend/src/features/register/components/RegisterDateInput/RegisterDateInput.tsx",["264","265","266","267"],[],"import React, {useState, useEffect} from \"react\";\nimport { useDispatch, useSelector} from \"react-redux\";\n\nimport { ValidatedDateSelector } from \"../../../../components/ValidatedInput/ValidatedDateSelector\";\nimport { getMonths, getDays, getYears } from \"../../../../utils/DateUtils\";\nimport { AppDispatch, RootState } from \"../../../../redux/Store\";\nimport { updateRegister } from \"../../../../redux/Slices/RegisterSlice\";\nimport { validateDob } from \"../../../../services/Validators\";\nimport { Dob } from \"../../../../utils/GlobalInterfaces\";\nimport './RegisterDateInput.css'\n\ninterface  RegisterDateInputProps{\n    date: Dob;\n}\n\nexport const RegisterDateInput:React.FC<RegisterDateInputProps> = ({date}) =>{\n    \n    const state = useSelector((state:RootState) => state.register);\n    const dispatch:AppDispatch = useDispatch();\n    const [valid, setValid] = useState(true);\n\nconst updateState = (name:string, value:string|number|boolean ):void =>{\n    dispatch (updateRegister({\n        name,\n        value\n    }));\n}\n\nuseEffect(() => {\n     let {day, month, year} = state.dob;\n     if(day && month && year ){\n        setValid(validateDob({\n            month,\n            day, \n            year,\n        }));\n        dispatch(updateRegister({name:'dobValid', value:valid}));\n     }\n},[state.dob.day, state.dob.month, state.dob.year, state.dobValid, valid]);\n\n\n\n    return (\n        <div className=\"register-date\">\n            <div className=\"register-date-content\">\n                <div className=\"register-date-month\">\n                    <ValidatedDateSelector\n                    style={\"validated-month\"}\n                    valid = {valid}\n                    name={\"Month\"}\n                    dropDown={getMonths}\n                    dispatcher={updateState}\n                    data={date.month}\n                    />\n                </div>\n\n                <div className=\"regiister-date-day\">\n                    <ValidatedDateSelector\n                    style={\"validated-day\"}\n                    valid = {valid}\n                    name={\"Day\"}\n                    dropDown={getDays}\n                    dispatcher={updateState}\n                    data={date.day}\n                    />\n                </div>\n\n                <div className=\"register-name-year\">\n                    <ValidatedDateSelector\n                    style={\"validated-year\"}\n                    valid = {valid}\n                    name={\"Year\"}\n                    dropDown={getYears}\n                    dispatcher={updateState}\n                    data={date.year}\n                    />\n                </div>\n            </div>\n            {valid ? <></> : <span className=\"register-date-error\">Please input a valid date. You must be older than 13 years.</span>}\n        </div>\n    );\n}","/Users/nana/Desktop/twitterApp/frontend/src/components/ValidatedInput/ValidatedDateSelector.tsx",[],[],"/Users/nana/Desktop/twitterApp/frontend/src/utils/DateUtils.tsx",[],[],"/Users/nana/Desktop/twitterApp/frontend/src/redux/Store.ts",[],[],"/Users/nana/Desktop/twitterApp/frontend/src/redux/Slices/RegisterSlice.ts",["268","269","270","271"],[],"/Users/nana/Desktop/twitterApp/frontend/src/features/register/components/RegisterNameInput/RegisterNameInput.tsx",[],[],"/Users/nana/Desktop/twitterApp/frontend/src/components/ValidatedInput/ValidatedTextInput.tsx",[],[],"/Users/nana/Desktop/twitterApp/frontend/src/features/register/components/RegisterEmailInput/RegisterEmailInputs.tsx",["272"],[],"import React, {useState, useEffect} from \"react\";\nimport { ValidatedTextInput } from \"../../../../components/ValidatedInput/ValidatedTextInput\";\nimport { useDispatch } from \"react-redux\";\nimport { AppDispatch } from \"../../../../redux/Store\";\nimport { updateRegister } from \"../../../../redux/Slices/RegisterSlice\";\nimport { validateEmail } from \"../../../../services/Validators\";\nimport './RegisterEmailInput.css'\n\ninterface RegisterEmailInputProps{\n    email:string;\n}\n\nexport const RegisterEmailInput:React.FC<RegisterEmailInputProps> = ({email}) => {\n    \n    const [validEmail, setValidEmail] = useState<boolean>(true);\n\n    const dispatch:AppDispatch = useDispatch();\n\n    const updateEmail = (e:React.ChangeEvent<HTMLInputElement>): void =>{\n        dispatch(updateRegister({\n            name: \"email\",\n            value:e.target.value\n        }));\n\n        let valid  = validateEmail(e.target.value);\n        setValidEmail(valid);\n\n        dispatch(updateRegister({\n            name: \"emailValid\",\n            value: valid\n        }))\n    }\n\n    return(\n        <div className=\"register-email-input\">\n            <ValidatedTextInput data={email} valid={validEmail} label={\"email\"} name={\"email\"} changeValue={updateEmail} />\n            {validEmail ? <></> : <span  className=\"register-email-error\">Please enter a valid email.</span>}\n        </div>\n    )\n\n}","/Users/nana/Desktop/twitterApp/frontend/src/components/Checkbox/Checkbox.tsx",[],[],"/Users/nana/Desktop/twitterApp/frontend/src/components/Checkbox/StyledCheckbox.tsx",[],[],"/Users/nana/Desktop/twitterApp/frontend/src/components/Checkbox/CheckBox.tsx",[],[],"/Users/nana/Desktop/twitterApp/frontend/src/components/ValidatedInput/ValidatedDisplay.tsx",[],[],"/Users/nana/Desktop/twitterApp/frontend/src/components/DropDown/DropDown.tsx",[],[],"/Users/nana/Desktop/twitterApp/frontend/src/pages/Feed.tsx",[],[],"/Users/nana/Desktop/twitterApp/frontend/src/components/Modal/Modal.tsx",["273"],[],"import React from \"react\";\nimport { JsxElement } from \"typescript\";\n\nimport '../../assets/global.css'\nimport './Modal.css';\n\n\ninterface ModalProps{\n    topContent:JSX.Element;\n    content: JSX.Element;\n    bottomContent: JSX.Element;\n}\n\nexport const Modal: React.FC<ModalProps> = ({topContent, content, bottomContent}) => {\n    return(\n        <div className=\"modal\">\n            <div className=\"modal-box bg-color\">\n                <div className=\"modal-top\">\n                    {topContent}\n                </div>\n                <div className=\"modal-content\">\n                    {content}\n                </div>\n                <div className=\"modal-bottom\">\n                    {bottomContent}\n                </div>\n            </div>\n        </div>\n    );\n}\n","/Users/nana/Desktop/twitterApp/frontend/src/features/register/components/RegisterNextButton/RegisterNextButton.tsx",["274"],[],"import React from \"react\";\nimport styled from \"styled-components\";\nimport { StyledNextButtonProps } from \"../../../../utils/GlobalInterfaces\";\nimport { AppDispatch, RootState } from \"../../../../redux/Store\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { incrementStep, registerUser, sendVerification, updateRegister, updateUserPassword, updateUserPhone } from \"../../../../redux/Slices/RegisterSlice\";\n\nexport const StyledNextButton = styled.button<StyledNextButtonProps>`\n    width: 75%;\n    height: 52px;\n    font-size: 17px;\n    color: white;\n    background-color: ${(props) =>props.color === 'blue' ? props.theme.colors.blue : props.theme.colors.black};\n    opacity: ${(props) => props.active ? 1.0 : .5};\n    border-radius: 50px;\n    border:none;\n    cursor: ${(props) => props.active ? \"pointer\" : \"auto\"};\n`;\n\n\ninterface RegisterNextButtonProps{\n    step:number;\n}\n\nexport const RegisterNextButton:React.FC<RegisterNextButtonProps> =({step}) =>{\n    const state = useSelector((state:RootState) => state.register);\n    const dispatch:AppDispatch = useDispatch();\n\n\n    const nextStep = () => {\n        dispatch(incrementStep());\n    }\n\n    const sendUserInfo = () => {\n        const user = {\n            firstName: state.firstName,\n            lastName: state.lastName,\n            email: state.email,\n            //dob: cleanDateForRequest(state.dob),\n            dob: new Date(\n                state.dob.year,\n                state.dob.month - 1, // JavaScript months are 0-based, so we subtract 1\n                state.dob.day\n            ).toLocaleDateString('en-CA')\n        }\n        dispatch(registerUser(user));\n    }\n\n\n    const sendPhoneNumber = () => {\n        dispatch(updateUserPhone({\n            username: state.username,\n            phone: state.phoneNumber \n        }))\n    }\n\n    const verifyEmail = () => {\n        dispatch(sendVerification({\n            username: state.username,\n            code: state.code,\n        }));\n    }\n\n    const sendPassword = () => {\n        dispatch(updateUserPassword({\n            username: state.username,\n            password: state.password,\n        }))\n    }\n\n    const determineButtonContent = (step:number):JSX.Element => {\n        console.log(\"rendering the button\");\n        switch(step){\n            case 1:\n                let stepOneActive = state.dobValid && state.emailValid && state.firstNameValid && state.lastNameValid;\n                return <StyledNextButton \n                            disabled={!stepOneActive}\n                            color={\"black\"}\n                            active={stepOneActive}\n                            onClick={nextStep}>\n                            Next\n                        </StyledNextButton>\n            case 2:\n                    return <StyledNextButton  \n                                active={true} \n                                color={\"black\"} \n                                onClick={ nextStep}>\n                                Next\n                            </StyledNextButton>\n            case 3:\n                    return <StyledNextButton \n                                onClick={sendUserInfo} \n                                color={\"black\"} \n                                active={true}>\n                                Sign Up\n                            </StyledNextButton>\n            case 4:\n                let stepFourActive = (state.phoneNumber && state.phoneNumberValid) ?  true : false;\n                    return  <StyledNextButton \n                                disabled={!stepFourActive}\n                                color={'black'}\n                                active={stepFourActive}\n                                onClick={sendPhoneNumber}>\n                                Update Number\n                            </StyledNextButton>\n            case 5: \n                let stepFiveActive = state.code ? true :false;\n                console.log(state.code);\n                    return  <StyledNextButton \n                                active={stepFiveActive}\n                                disabled={!stepFiveActive}\n                                color={\"black\"}\n                                onClick={verifyEmail}>\n                                Next\n                            </StyledNextButton>\n            case 6: \n                    return  <StyledNextButton \n                                active={state.password.length >= 8}\n                                disabled={!(state.password.length >= 8)}\n                                onClick={sendPassword}\n                                color={\"black\"}>\n                                Next\n                            </StyledNextButton>\n            default:\n                return <StyledNextButton \n                            disabled={true}\n                            color={\"black\"}\n                            active={false}\n                            onClick={() => console.log(\"hello\")}>\n                            {step} \n                        </StyledNextButton>\n        }\n    }\n   return determineButtonContent(step);\n}\n","/Users/nana/Desktop/twitterApp/frontend/src/features/register/components/RegisterForms/RegisterFormOne.tsx",[],[],"/Users/nana/Desktop/twitterApp/frontend/src/features/register/components/RegisterForms/RegisterFormThree.tsx",[],[],"/Users/nana/Desktop/twitterApp/frontend/src/features/register/components/RegisterForms/RegisterFormFour.tsx",["275","276"],[],"import React, {useEffect, useState} from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AppDispatch, RootState } from \"../../../../redux/Store\";\n\nimport { CheckBox } from \"../../../../components/Checkbox/CheckBox\";\nimport { DropDown } from \"../../../../components/DropDown/DropDown\";\nimport { ValidatedTextInput } from \"../../../../components/ValidatedInput/ValidatedTextInput\";\nimport { countryCodeDropdown } from \"../../util/RegisterModalUtils\";\nimport { validatePhone } from \"../../../../services/Validators\";\nimport { updateRegister } from \"../../../../redux/Slices/RegisterSlice\";\nimport './RegisterForm.css'\nimport '../../../../assets/global.css'\n\n\n\n\nexport const RegisterFormFour:React.FC = () => {\n\n    const state = useSelector((state:RootState) => state.register);\n\n    const [phoneCode, setPhoneCode] = useState<string>(\"+1\");\n    const [phoneNumber, setPhoneNumber] = useState<string>(\"\");\n    const [validNumber, setValidNumber] = useState<boolean>(true);\n\n    const dispatch:AppDispatch = useDispatch();\n\n\n\n    const changeCode = (e:React.ChangeEvent<HTMLSelectElement>) => {\n        setPhoneCode(e.target.value.split(\" \")[0]);\n    }\n\n    const changePhoneNumber = (e:React.ChangeEvent<HTMLInputElement>) =>{\n        setPhoneNumber(e.target.value);\n        dispatch(updateRegister({\n            name: \"phoneNumber\",\n            value: e.target.value\n        }))\n    }\n\n    useEffect(()=>{\n        if(phoneNumber){\n            setValidNumber(validatePhone(phoneNumber));\n            dispatch(updateRegister({\n                name: \"phoneNumberValid\",\n                value: validatePhone(phoneNumber)\n            }))\n        }\n    }, [phoneCode, phoneNumber])\n\n    return(\n        <div className=\"register-container\">\n            <div className=\"register-content\">\n                <h1 className=\"register-header-2\">Add a phone number</h1>\n                <p className=\"register-text color-gray\">Enter the phone number you will like to associate with the organization account. You wont get a verification code sent here.</p>\n\n                <div className={validNumber ? \" register-four-input-wrapper\" : \"register-four-input-wrapper-condensed\"}>\n                    <DropDown \n                        content={countryCodeDropdown}\n                        change={changeCode}\n                        label={\"Country code\"}\n                        defaultValue={\"United States +1\"}\n                    />\n                    <ValidatedTextInput \n                        valid={true}\n                        name={\"phoneNumber\"}\n                        label={\"Your Phone Number \"}\n                        changeValue={changePhoneNumber}\n                    />\n                    {validNumber ? <></> : <p className=\"register-error color-red\">Please enter a valid 10 digit number</p>}\n                </div>\n\n                <div className=\"register-four-checkbox-wrapper\">\n                    <p className=\"register-text color-gray\">Let people who have your phone number find and connect with you on twitter. <span className=\"register-link color-blue\">Leran more</span>.</p>\n                    <CheckBox/>\n                </div>\n\n\n                <div className=\"register-four-checkbox-wrapper\">\n                    <p className=\"register-text color-gray\">Let app use your phone number to personalize our services, including ads (if permitted by your Ads preferences). If you don't enable twitter will  still use your phone number for purposes including account security, spam, fraud, and abuse prevention. <span className=\"register-link color-blue\">See our Privacy Policy for more information</span> </p>\n                    <CheckBox/>\n                </div>\n            </div>\n        </div>\n    )\n}","/Users/nana/Desktop/twitterApp/frontend/src/features/register/components/RegisterForms/RegisterFormTwo.tsx",[],[],"/Users/nana/Desktop/twitterApp/frontend/src/features/register/components/RegisterForms/RegisterFormFive.tsx",["277"],[],"import React, {useState} from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AppDispatch, RootState } from \"../../../../redux/Store\";\n\nimport { ValidatedTextInput } from \"../../../../components/ValidatedInput/ValidatedTextInput\";\nimport { resendEmail, updateRegister } from \"../../../../redux/Slices/RegisterSlice\";\nimport './RegisterForm.css'\nimport '../../../../assets/global.css'\n\n\nexport const RegisterFormFive:React.FC = () => {\n    const state = useSelector((state:RootState) => state.register);\n    const dispatch:AppDispatch = useDispatch();\n\n    const [code, setCode] = useState<string>(\" \");\n\n    const handleChange = (e:React.ChangeEvent<HTMLInputElement>) => {\n        setCode(e.target.value);\n        dispatch(updateRegister({\n            name: \"code\",\n             value: e.target.value\n        }));\n    } \n\n    //ressend the verification code\n    const resendCode = () => {\n        dispatch(\n            resendEmail(state.username)\n        ) \n    };\n\n    return (\n        <div className=\"register-container\">\n            <div className=\"register-content\">\n                <h1 className=\"register-header-2\">We sent you a code</h1>\n                <p className=\"register-text color-gray\">Enter it below to verify {state.email}</p>\n                <div className=\"register-five-input-wrapper\">\n                <ValidatedTextInput \n                    valid={true}\n                    name={\"code\"}\n                    label={\"Verification Code\"}\n                    changeValue={handleChange}\n                />\n                    <p className=\"register-five-message color-blue\" onClick={resendCode}>Didn't receive a email?</p>\n                </div>\n                \n\n            </div>\n        </div>\n    )\n}","/Users/nana/Desktop/twitterApp/frontend/src/features/register/components/RegisterForms/RegisterFormSix.tsx",["278","279"],[],"import React, {useState, useEffect} from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AppDispatch, RootState } from \"../../../../redux/Store\";\nimport { useNavigate } from \"react-router-dom\";\nimport { ValidatedTextInput } from \"../../../../components/ValidatedInput/ValidatedTextInput\";\nimport VisibilityOffOutlinedIcon  from \"@mui/icons-material/VisibilityOffOutlined\";\nimport  VisibilityOutlinedIcon from  \"@mui/icons-material/VisibilityOutlined\";\nimport { updateRegister } from \"../../../../redux/Slices/RegisterSlice\";\nimport { loginUser, setFromRegister } from \"../../../../redux/Slices/UserSlice\";\n\nimport './RegisterForm.css'\nimport '../../../../assets/global.css'\n\n\nexport const RegisterFormSix:React.FC = () => {\n    const state = useSelector((state:RootState) => state);\n    const dispatch:AppDispatch = useDispatch();\n\n    const [ active, setActive] = useState<boolean> (false);\n    const [password, setPassword] = useState<string>(\"\");\n    const navigate = useNavigate();\n\n    \n    const handleChange = (e:React.ChangeEvent<HTMLInputElement>) => {\n        setPassword(e.target.value);\n        dispatch(updateRegister({ \n            name: \"password\",\n            value: e.target.value\n        }));\n    }\n\n    //password toggle view and\n    const toggleView = () => {\n        setActive(!active);\n    }\n\n\n    //watch side effect of the dispatch object being dispatch\n    useEffect(() =>{\n        if(state.user.loggedIn){\n            navigate(\"/home\");\n            return (() =>{\n\n            });\n        }\n        if(state.user.fromRegister){\n            //we are ready to dispatch the login\n            dispatch(loginUser({\n                username: state.register.username,\n                password: state.register.password\n            }));\n            return;\n        }\n        if(state.register.login){\n            //store some user info into local storage, that way we can load the user into user slides \n            //when we hit the feed page //navigate(\"/home\"); //set the dispatch to set user fromRegister\n           dispatch(setFromRegister(true));\n         }\n    }, [state.register.login, state.user.loggedIn, state.user.fromRegister]);\n\n    return (\n        <div className=\"register-container\">\n            <div className=\"register-content\">\n                <h1 className=\"register-header-2\">You'll need a password</h1>\n                <p className=\"register-text color-gray\">Make sure it's 8 characters or more</p>\n                <div className=\"register-six-password\">\n                    <ValidatedTextInput\n                        valid={true}\n                        label={\"Password\"}\n                        name={\"password\"}\n                        changeValue={handleChange}\n                        attributes={{\n                            minlenght: 8,\n                            type: active ? \"text\" : \"password\"\n                        }}\n                    />\n                        <div onClick={toggleView} className=\"register-six-icon\">\n                            {active ? <VisibilityOffOutlinedIcon sx = {{fontSize: \"24px\"}}/> : <VisibilityOutlinedIcon sx={{fontSize: \"24px\"}}/>}\n                        </div>\n                </div>\n            </div>\n        </div>\n    )\n\n}","/Users/nana/Desktop/twitterApp/frontend/src/features/register/index.tsx",[],[],"/Users/nana/Desktop/twitterApp/frontend/src/redux/Slices/UserSlice.tsx",[],[],"/Users/nana/Desktop/twitterApp/frontend/src/features/landing/components/RightSideBar/RightSideBar.tsx",["280"],[],"import React from \"react\";\n\nimport { GoogleButton } from \"../Buttons/GoogleButton\";\nimport { AppleButton } from \"../Buttons/AppleButton\";\nimport { SignUpButton } from \"../Buttons/SignUpButton\";\nimport { SignInButton } from \"../Buttons/SignInButton\";\n\nimport './RightSideBar.css'\nimport '../../../../assets/global.css'\nimport logoBlue from '../../../../assets/fwitter-logo-large-blue.png'\n\n\ninterface RightSideBarProps{\n     toggleRegister: () => void;\n     toggleLogin: () => void;\n}\n\nexport const RightSideBar:React.FC<RightSideBarProps> = ({toggleRegister, toggleLogin}) => {\n\n    return (\n        <div className=\"right-side-bar\">\n             <img src=\"{logoBlue}\" className=\"right-side-bar-logo\" alt=\"\" />\n             <h1 className=\"right-side-bar-h1\"> Hapening now</h1>\n             <h2 className=\"right-side-bar-h2\">Join us today</h2>\n            <div className=\"right-side-bar-signup-wrapper\">\n                <GoogleButton/>\n                <AppleButton/>\n                    <div className=\"right-side-bar-divider\">\n                        <div className=\"right-side-bar-line\"></div>\n                        <p className=\"right-side-bar-or\">or</p>\n                        <div className=\"right-side-bar-line\"></div>\n                    </div>\n                <SignUpButton handleClick={toggleRegister}/>\n                <p className=\"right-side-bar-legal color-gray\">By signing up, you agree to the <span className=\"link color-blue\">Terms of Service</span>and <span className=\"link color-blue\"> Privacy Policy</span>, including <span className=\"link color-blue\">Cookie Use</span></p>\n            </div>\n             <div className=\"right-side-bar-login-wrapper\">\n                <h3 className=\"right-side-bar-h2\">Already have an account?</h3>\n                <SignInButton handleClick={toggleLogin}/>\n             </div>\n            </div>\n    )\n}","/Users/nana/Desktop/twitterApp/frontend/src/features/landing/components/Buttons/GoogleButton.tsx",[],[],"/Users/nana/Desktop/twitterApp/frontend/src/features/landing/components/Buttons/AppleButton.tsx",[],[],"/Users/nana/Desktop/twitterApp/frontend/src/features/landing/components/Buttons/SignUpButton.tsx",[],[],"/Users/nana/Desktop/twitterApp/frontend/src/features/landing/components/Buttons/SignInButton.tsx",[],[],"/Users/nana/Desktop/twitterApp/frontend/src/features/landing/Index.tsx",["281"],[],"import React from \"react\";\nimport { RightSideBar } from \"./components/RightSideBar/RightSideBar\";\nimport { LandingFooter } from \"./components/LandingFooter/LandingFooter\";\n\nexport {RightSideBar, LandingFooter};\n\n","/Users/nana/Desktop/twitterApp/frontend/src/features/landing/components/LandingFooter/LandingFooter.tsx",[],[],"/Users/nana/Desktop/twitterApp/frontend/src/features/Login/Index.ts",[],[],"/Users/nana/Desktop/twitterApp/frontend/src/features/Login/LoginModal/LoginModal.tsx",["282"],[],"import React from \"react\";\n\nimport { Modal } from \"../../../components/Modal/Modal\";\nimport { LoginModalTop } from \"../LoginModalTop/LoginModalTop\";\nimport { LoginFormOne } from \"../LoginForms/LoginFormOne\";\n\n\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../../redux/Store\";\n\ninterface LoginModalProps{\n    toggleModal: () => void;\n}\n\n\nexport const LoginModal:React.FC<LoginModalProps>  = ({toggleModal}) => {\n\n    const state = useSelector((state:RootState) => state.user);\n\n    return(\n        <Modal\n                topContent={<LoginModalTop closedModal={toggleModal}/> }\n                content={<LoginFormOne/>}\n                bottomContent={<div>Login Bottom</div>}\n        />\n    )\n\n}","/Users/nana/Desktop/twitterApp/frontend/src/features/Login/LoginModalTop/LoginModalTop.tsx",["283"],[],"import React from \"react\";\n\n\nimport blueLogo from '../../../assets/fwitter-logo-large-blue.png'\nimport './LoginModalTop.css'\n\n\ninterface LoginModalTopProps{\n    closedModal: () => void;\n}\n\n\nexport const LoginModalTop:React.FC <LoginModalTopProps> = ({closedModal}) => {\n\n    return (\n        <div className=\"login-modal-top\">\n            <div className=\"login-modal-top-left\">\n                <div className=\"login-modal-top-shadow\" onClick={closedModal}>\n                        x\n                </div>\n            </div>\n            <div className=\"login-modal-top-middle\">\n                <img src=\"\" className=\"login-modal-top-logo\" alt=\"\" />\n            </div>\n            <div className=\"login-modal-top-right\"></div>\n        </div>\n    )\n}","/Users/nana/Desktop/twitterApp/frontend/src/features/Login/LoginForms/LoginFormOne.tsx",[],[],"/Users/nana/Desktop/twitterApp/frontend/src/components/ModalButton/ModalButton.tsx",[],[],{"ruleId":"284","severity":1,"message":"285","line":46,"column":6,"nodeType":"286","endLine":46,"endColumn":8,"suggestions":"287"},{"ruleId":"288","severity":1,"message":"289","line":27,"column":41,"nodeType":"290","messageId":"291","endLine":27,"endColumn":43},{"ruleId":"292","severity":1,"message":"293","line":2,"column":26,"nodeType":"294","messageId":"295","endLine":2,"endColumn":35},{"ruleId":"284","severity":1,"message":"296","line":38,"column":7,"nodeType":"286","endLine":38,"endColumn":130,"suggestions":"297"},{"ruleId":"292","severity":1,"message":"298","line":26,"column":10,"nodeType":"294","messageId":"295","endLine":26,"endColumn":16},{"ruleId":"292","severity":1,"message":"299","line":26,"column":18,"nodeType":"294","messageId":"295","endLine":26,"endColumn":23},{"ruleId":"284","severity":1,"message":"300","line":39,"column":3,"nodeType":"286","endLine":39,"endColumn":74,"suggestions":"301"},{"ruleId":"302","severity":1,"message":"303","line":48,"column":21,"nodeType":"304","messageId":"305","endLine":48,"endColumn":46},{"ruleId":"302","severity":1,"message":"303","line":59,"column":21,"nodeType":"304","messageId":"305","endLine":59,"endColumn":44},{"ruleId":"302","severity":1,"message":"303","line":70,"column":21,"nodeType":"304","messageId":"305","endLine":70,"endColumn":45},{"ruleId":"292","severity":1,"message":"306","line":95,"column":19,"nodeType":"294","messageId":"295","endLine":95,"endColumn":22},{"ruleId":"292","severity":1,"message":"307","line":96,"column":19,"nodeType":"294","messageId":"295","endLine":96,"endColumn":24},{"ruleId":"292","severity":1,"message":"306","line":115,"column":19,"nodeType":"294","messageId":"295","endLine":115,"endColumn":22},{"ruleId":"292","severity":1,"message":"306","line":140,"column":19,"nodeType":"294","messageId":"295","endLine":140,"endColumn":22},{"ruleId":"292","severity":1,"message":"293","line":1,"column":26,"nodeType":"294","messageId":"295","endLine":1,"endColumn":35},{"ruleId":"292","severity":1,"message":"308","line":2,"column":10,"nodeType":"294","messageId":"295","endLine":2,"endColumn":20},{"ruleId":"292","severity":1,"message":"309","line":6,"column":57,"nodeType":"294","messageId":"295","endLine":6,"endColumn":71},{"ruleId":"292","severity":1,"message":"310","line":19,"column":11,"nodeType":"294","messageId":"295","endLine":19,"endColumn":16},{"ruleId":"284","severity":1,"message":"285","line":49,"column":8,"nodeType":"286","endLine":49,"endColumn":32,"suggestions":"311"},{"ruleId":"292","severity":1,"message":"312","line":15,"column":12,"nodeType":"294","messageId":"295","endLine":15,"endColumn":16},{"ruleId":"292","severity":1,"message":"313","line":20,"column":12,"nodeType":"294","messageId":"295","endLine":20,"endColumn":20},{"ruleId":"284","severity":1,"message":"314","line":59,"column":8,"nodeType":"286","endLine":59,"endColumn":76,"suggestions":"315"},{"ruleId":"292","severity":1,"message":"316","line":10,"column":8,"nodeType":"294","messageId":"295","endLine":10,"endColumn":16},{"ruleId":"292","severity":1,"message":"317","line":1,"column":8,"nodeType":"294","messageId":"295","endLine":1,"endColumn":13},{"ruleId":"292","severity":1,"message":"310","line":18,"column":11,"nodeType":"294","messageId":"295","endLine":18,"endColumn":16},{"ruleId":"292","severity":1,"message":"318","line":4,"column":8,"nodeType":"294","messageId":"295","endLine":4,"endColumn":16},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["319"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'validatedState' and 'validator'. Either include them or remove the dependency array. You can also do a functional update 'SetValidateState(v => ...)' if you only need 'validatedState' in the 'SetValidateState' call.",["320"],"'active' is assigned a value but never used.","'valid' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'state.dob'. Either include them or remove the dependency array.",["321"],"react/style-prop-object","Style prop value must be an object","JSXAttribute","stylePropNotObject","'req' is assigned a value but never used.","'email' is assigned a value but never used.","'JsxElement' is defined but never used.","'updateRegister' is defined but never used.","'state' is assigned a value but never used.",["322"],"'code' is assigned a value but never used.","'password' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'navigate', 'state.register.password', and 'state.register.username'. Either include them or remove the dependency array.",["323"],"'logoBlue' is defined but never used.","'React' is defined but never used.","'blueLogo' is defined but never used.",{"desc":"324","fix":"325"},{"desc":"326","fix":"327"},{"desc":"328","fix":"329"},{"desc":"330","fix":"331"},{"desc":"332","fix":"333"},"Update the dependencies array to be: [dispatch]",{"range":"334","text":"335"},"Update the dependencies array to be: [validatedState.active, validatedState.typeIn, validatedState.value, validatedState.labelActive, validatedState.labelColor, validatedState, validator]",{"range":"336","text":"337"},"Update the dependencies array to be: [dispatch, state.dob, state.dob.day, state.dob.month, state.dob.year, state.dobValid, valid]",{"range":"338","text":"339"},"Update the dependencies array to be: [dispatch, phoneCode, phoneNumber]",{"range":"340","text":"341"},"Update the dependencies array to be: [state.register.login, state.user.loggedIn, state.user.fromRegister, state.register.username, state.register.password, navigate, dispatch]",{"range":"342","text":"343"},[1217,1219],"[dispatch]",[1055,1178],"[validatedState.active, validatedState.typeIn, validatedState.value, validatedState.labelActive, validatedState.labelColor, validatedState, validator]",[1286,1357],"[dispatch, state.dob, state.dob.day, state.dob.month, state.dob.year, state.dobValid, valid]",[1674,1698],"[dispatch, phoneCode, phoneNumber]",[2114,2182],"[state.register.login, state.user.loggedIn, state.user.fromRegister, state.register.username, state.register.password, navigate, dispatch]"]