{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nconst initialState = {\n  loading: false,\n  error: false,\n  firstName: '',\n  firstNameValid: false,\n  lastName: '',\n  lastNameValid: false,\n  email: '',\n  emailValid: false,\n  dob: {\n    month: 0,\n    day: 0,\n    year: 0\n  },\n  dobValid: false,\n  step: 1,\n  username: \" \"\n};\n\n/* The action sends a POST request using `axios.post`, passing the `user` object as the payload.\n If the API request is successful, it returns the response data (`req.data`) as the result of\n the action. In case of failure, the action gracefully handles errors by rejecting with the\n error value using `thunkAPI.rejectWithValue(e)`.*/\nexport const registerUser = createAsyncThunk('register/register', async (user, thunkAPI) => {\n  try {\n    const req = await axios.post('http://localhost:8050/auth/register', user);\n    return await req.data;\n  } catch (e) {\n    return thunkAPI.rejectWithValue(e);\n  }\n});\nexport const updateUserPhone = createAsyncThunk('register/phone', async (body, thunkAPI) => {\n  try {\n    const req = await axios.put('http://localhost:8050/auth/update/phone', body);\n    const email = await axios.post('http://localhost:8050/auth/email/code', {\n      username: body.username\n    });\n  } catch (e) {\n    var _error$response, _error$response2;\n    //return thunkAPI.rejectWithValue(e);\n    const error = e;\n\n    // Extract the necessary information from the error object\n    const errorPayload = {\n      message: error.message,\n      // Extract the error message\n      status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n      // Extract the HTTP status code (if available)\n      data: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data // Extract the response data (if available)\n    };\n\n    // Return the custom error object as the rejected action payload\n    return thunkAPI.rejectWithValue(errorPayload);\n  }\n});\nexport const resendEmail = createAsyncThunk('register/resend', async (username, thunkAPI) => {\n  try {\n    const req = await axios.post('http://localhost:8050/auth/email/code', {\n      username\n    });\n  } catch (e) {\n    return thunkAPI.rejectWithValue(e);\n  }\n});\n\n// ---------------------------------------------------------------------\n// RegisterSlice - Redux Slice for Register Data\n// ---------------------------------------------------------------------\n// This Redux slice named \"register\" manages the state for user registration data.\n// It includes reducers to update specific fields in the registration state, such as\n// date of birth (dob) fields, and individual fields for name, email, password, etc.\n// Additionally, it provides reducers to increment and decrement the \"step\" value, which\n// might be used to track the progress of a multi-step registration process or form.\n//\n// The \"updateRegister\" reducer handles both dob fields (month, day, year) and individual\n// fields by dynamically updating the state. If the field is dob, it creates a new dob\n// object with the updated value and merges it into the state. For other fields, it\n// directly updates the field in the state.\n//\n// The \"incrementStep\" reducer increments the \"step\" value by 1, while the \"decrementStep\"\n// reducer decrements the \"step\" value by 1, but only when the current step is between 2 and 5.\n// If the current step is at the initial step, step 4, or step 6 or above, the decrement will\n// not be allowed to avoid unwanted state changes.\n// ---------------------------------------------------------------------\nexport const RegisterSlice = createSlice({\n  name: \"register\",\n  initialState,\n  reducers: {\n    updateRegister(state, action) {\n      let {\n        name,\n        value\n      } = action.payload;\n      if (name === 'month' || name === 'day' || name === 'year') {\n        let dob = state.dob;\n        dob = {\n          ...dob,\n          [name]: value\n        };\n        state = {\n          ...state,\n          dob\n        };\n      } else {\n        state = {\n          ...state,\n          [name]: value\n        };\n      }\n      console.log('Updating the global register state:', state);\n      return state;\n    },\n    incrementStep(state) {\n      state.step++;\n      return state;\n    },\n    decrementStep(state) {\n      if (state.step === 1 || state.step === 4 || state.step >= 6) {\n        return state;\n      } else {\n        state.step--;\n        return state;\n      }\n    }\n  },\n  //Function to hold cases or things that happenes when request is made eg: pending..\n  extraReducers: builder => {\n    builder.addCase(registerUser.pending, (state, action) => {\n      state.loading = true;\n      return state;\n    });\n    builder.addCase(updateUserPhone.pending, (state, action) => {\n      state = {\n        ...state,\n        loading: true\n      };\n      return state;\n    });\n    builder.addCase(resendEmail.pending, (state, action) => {\n      state = {\n        ...state,\n        loading: true\n      };\n      return state;\n    });\n    builder.addCase(registerUser.fulfilled, (state, action) => {\n      let nextStep = state.step + 1;\n      state = {\n        ...state,\n        username: action.payload.username,\n        loading: false,\n        error: false,\n        step: nextStep\n      };\n      return state;\n    });\n    builder.addCase(updateUserPhone.fulfilled, (state, action) => {\n      let nextStep = state.step + 1;\n      state = {\n        ...state,\n        loading: false,\n        error: false,\n        step: nextStep\n      };\n      return state;\n    });\n    builder.addCase(resendEmail.fulfilled, (state, action) => {\n      state = {\n        ...state,\n        loading: false,\n        error: false\n      };\n      return state;\n    });\n    builder.addCase(registerUser.rejected, (state, action) => {\n      state.error = true;\n      state.loading = false;\n      return state;\n    });\n    builder.addCase(updateUserPhone.rejected, (state, action) => {\n      state = {\n        ...state,\n        loading: false,\n        error: true\n      };\n      return state;\n    });\n    builder.addCase(resendEmail.rejected, (state, action) => {\n      state = {\n        ...state,\n        loading: false,\n        error: true\n      };\n      return state;\n    });\n  }\n});\nexport const {\n  updateRegister,\n  incrementStep,\n  decrementStep\n} = RegisterSlice.actions;\nexport default RegisterSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","axios","initialState","loading","error","firstName","firstNameValid","lastName","lastNameValid","email","emailValid","dob","month","day","year","dobValid","step","username","registerUser","user","thunkAPI","req","post","data","e","rejectWithValue","updateUserPhone","body","put","_error$response","_error$response2","errorPayload","message","status","response","resendEmail","RegisterSlice","name","reducers","updateRegister","state","action","value","payload","console","log","incrementStep","decrementStep","extraReducers","builder","addCase","pending","fulfilled","nextStep","rejected","actions","reducer"],"sources":["/Users/nana/Desktop/twitterApp/frontend/src/redux/Slices/RegisterSlice.ts"],"sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Dob } from \"../../utils/GlobalInterfaces\";\nimport axios, {AxiosError} from \"axios\";\n\n\ninterface RegisterSliceState {\n    loading: boolean;\n    error: boolean;\n    firstName: string;\n    firstNameValid: boolean;\n    lastName: string;\n    lastNameValid:boolean;\n    email:string;\n    emailValid: boolean;\n    dob:Dob;\n    dobValid: boolean;\n    step: number;\n    username:string;\n}\n\n\ninterface UpdatePayload{\n    name: string;\n    value: string | number | boolean;\n}\n\ninterface RegisterUser {\n    firstName:string;\n    lastName:string;\n    email:string;\n    dob:string;\n}\ninterface updatePhone{\n    username:string;\n    phone: string;\n}\n\nconst initialState:RegisterSliceState = {\n    loading:false,\n    error: false,\n    firstName: '',\n    firstNameValid:  false,\n    lastName: '',\n    lastNameValid: false,\n    email: '',\n    emailValid: false,\n    dob: {\n        month : 0,\n        day: 0,\n        year: 0\n    }, \n    dobValid: false,\n    step: 1,\n    username: \" \"\n}\n\n\n/* The action sends a POST request using `axios.post`, passing the `user` object as the payload.\n If the API request is successful, it returns the response data (`req.data`) as the result of\n the action. In case of failure, the action gracefully handles errors by rejecting with the\n error value using `thunkAPI.rejectWithValue(e)`.*/\nexport const registerUser = createAsyncThunk(\n    'register/register',\n    async(user:RegisterUser, thunkAPI) => {\n        try{\n            const req = await axios.post('http://localhost:8050/auth/register', user);\n            return await req.data;\n        }\n        catch (e){\n            return thunkAPI.rejectWithValue(e);\n        }\n    }\n)\n\n\nexport const updateUserPhone = createAsyncThunk(\n    'register/phone',\n    async (body:updatePhone, thunkAPI) => {\n        try{\n            const req = await axios.put('http://localhost:8050/auth/update/phone', body);\n            const email = await axios.post('http://localhost:8050/auth/email/code', {username:body.username});\n            \n        }catch(e){\n             //return thunkAPI.rejectWithValue(e);\n             const error = e as AxiosError<any>;\n\n      // Extract the necessary information from the error object\n      const errorPayload = {\n        message: error.message, // Extract the error message\n        status: error.response?.status, // Extract the HTTP status code (if available)\n        data: error.response?.data, // Extract the response data (if available)\n      };\n\n      // Return the custom error object as the rejected action payload\n      return thunkAPI.rejectWithValue(errorPayload);\n        }\n    }\n)\n\n\nexport const resendEmail = createAsyncThunk(\n    'register/resend',\n    async(username:string, thunkAPI) => {\n        try {\n            const req = await axios.post('http://localhost:8050/auth/email/code', {username});\n        } catch(e) {\n            return thunkAPI.rejectWithValue(e);\n        }\n    }\n)\n\n\n\n// ---------------------------------------------------------------------\n// RegisterSlice - Redux Slice for Register Data\n// ---------------------------------------------------------------------\n// This Redux slice named \"register\" manages the state for user registration data.\n// It includes reducers to update specific fields in the registration state, such as\n// date of birth (dob) fields, and individual fields for name, email, password, etc.\n// Additionally, it provides reducers to increment and decrement the \"step\" value, which\n// might be used to track the progress of a multi-step registration process or form.\n//\n// The \"updateRegister\" reducer handles both dob fields (month, day, year) and individual\n// fields by dynamically updating the state. If the field is dob, it creates a new dob\n// object with the updated value and merges it into the state. For other fields, it\n// directly updates the field in the state.\n//\n// The \"incrementStep\" reducer increments the \"step\" value by 1, while the \"decrementStep\"\n// reducer decrements the \"step\" value by 1, but only when the current step is between 2 and 5.\n// If the current step is at the initial step, step 4, or step 6 or above, the decrement will\n// not be allowed to avoid unwanted state changes.\n// ---------------------------------------------------------------------\nexport const RegisterSlice = createSlice ({\n    name: \"register\",\n    initialState,\n    reducers:{\n        updateRegister(state, action:PayloadAction<UpdatePayload>){\n            let {name, value} = action.payload;\n\n            if(name === 'month' || name === 'day' || name === 'year'){\n                let dob = state.dob;\n                dob = {\n                    ...dob,\n                    [name]:value\n                }\n                state = {\n                    ...state,\n                    dob\n                };\n            }else{\n                state = {\n                    ...state,\n                    [name]: value\n                }\n            }\n            console.log('Updating the global register state:', state); \n            return state;\n        },\n\n        incrementStep(state){\n            state.step++;\n            return state;\n        },\n        decrementStep(state){\n            if (state.step === 1 || state.step === 4|| state.step >= 6){\n                return state;\n            }else{\n                state.step --;\n                return state;\n            }\n        }\n    },\n\n    \n    //Function to hold cases or things that happenes when request is made eg: pending..\n    extraReducers: (builder) => {\n        builder.addCase(registerUser.pending, (state, action) =>{\n            state.loading = true;\n            return state;\n        });\n\n        builder.addCase(updateUserPhone.pending, (state, action) => {\n            state = {\n                ...state,\n                loading: true\n            }\n            return state;\n        });\n\n        builder.addCase(resendEmail.pending, (state, action) => {\n            state = {\n                ...state,\n                loading: true \n            }\n            return state;\n        });\n\n\n\n\n        builder.addCase(registerUser.fulfilled, (state, action) => {\n            let nextStep = state.step+ 1;\n            state = {\n                ...state,\n                username:action.payload.username,\n                loading: false,\n                error: false,\n                step:nextStep\n            }\n            return state;\n        });\n\n        builder.addCase(updateUserPhone.fulfilled, (state, action) => {\n            let nextStep = state.step + 1 ;\n            state = {\n                ...state,\n                loading: false,\n                error: false,\n                step: nextStep\n            }\n            return state; \n        });\n\n        builder.addCase(resendEmail.fulfilled, (state, action) => {\n            state = {\n                ...state,\n                loading: false,\n                error: false\n            }\n            return state;\n        } )\n\n\n\n\n        builder.addCase(registerUser.rejected, (state, action) =>{\n            state.error = true;\n            state.loading = false;\n            return state;\n        });\n\n        builder.addCase(updateUserPhone.rejected, (state, action) => {\n            state = {\n                ...state,\n                loading: false,\n                error: true,\n            }\n            return state;\n        });\n\n        builder.addCase(resendEmail.rejected, (state, action) => {\n            state = {\n                ...state,\n                loading: false,\n                error: true,\n            }\n            return state;\n        })\n    }\n});\n\n\nexport const {updateRegister, incrementStep, decrementStep } = RegisterSlice.actions;\n\nexport default RegisterSlice.reducer;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}