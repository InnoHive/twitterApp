{"ast":null,"code":"//if input string is emty string, set to boolean which wil not be valid\nexport const ValidateName = value => {\n  return value !== '';\n};\n_c = ValidateName;\nexport const validateDob = dob => {\n  let {\n    month,\n    day,\n    year\n  } = dob;\n  let leapYears = [];\n  for (let i = 2022; i > 1902; i -= 4) {\n    leapYears.push(i);\n  }\n  if (!month || !day || !year) {\n    return false;\n  } else if (month === 2 && day > 29) {\n    return false;\n  } else if (month === 2 && day === 29 && !leapYears.includes(year)) {\n    return false;\n  } else if ((month === 4 || month === 6 || month === 9 || month === 11) && day > 30) {\n    return false;\n  }\n  return checkAge(dob);\n};\nconst checkAge = dob => {\n  let {\n    month,\n    day,\n    year\n  } = dob;\n  let today = new Date();\n  let todaysYear = today.getFullYear();\n  let todaysMonth = today.getMonth();\n  let todaysDay = today.getDate();\n  if (todaysYear - year > 13) {\n    return true;\n  } else if (todaysYear - year === 13) {\n    if (todaysMonth > month) {\n      return true;\n    } else if (todaysMonth === month) {\n      if (todaysDay >= day) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }\n  return false;\n};\nexport const validateEmail = value => {\n  if (!value.toLocaleLowerCase().match(/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/)) {\n    return false;\n  }\n  return true;\n};\nexport const validatePhone = phone => {\n  let stripped = phone.replace(/[^0-9]/ig, \" \");\n};\nvar _c;\n$RefreshReg$(_c, \"ValidateName\");","map":{"version":3,"names":["ValidateName","value","_c","validateDob","dob","month","day","year","leapYears","i","push","includes","checkAge","today","Date","todaysYear","getFullYear","todaysMonth","getMonth","todaysDay","getDate","validateEmail","toLocaleLowerCase","match","validatePhone","phone","stripped","replace","$RefreshReg$"],"sources":["/Users/nana/Desktop/twitterApp/frontend/src/services/Validators.ts"],"sourcesContent":["import { Dob } from \"../utils/GlobalInterfaces\";\n\n\n//if input string is emty string, set to boolean which wil not be valid\nexport const ValidateName = (value:string): boolean =>{\n    return value !== '';\n}\n\nexport const validateDob = (dob:Dob):boolean =>{\n    let {month, day, year} = dob;\n\n    let leapYears:number[] = [];\n\n    for(let i=2022; i>1902; i-=4){\n        leapYears.push(i);\n    }\n    if(!month || !day ||!year){\n        return false;\n    }else if(month === 2  && day >29){ \n        return false;\n    }else if(month ===2 && day ===29 && !leapYears.includes(year)){\n        return false;\n    }else if ((month ===4 || month === 6 || month ===9 || month === 11) && day > 30){\n        return false;\n    }\n    return checkAge(dob);\n}\n\n\nconst checkAge = (dob:Dob):boolean => {\n    let {month, day, year} = dob;\n\n    let today = new Date();\n    let todaysYear = today.getFullYear();\n    let todaysMonth = today.getMonth();\n    let todaysDay = today.getDate();\n\n    if(todaysYear - year > 13){\n        return true;\n    }\n    else if (todaysYear - year === 13){\n        if(todaysMonth > month){\n            return true;\n        }\n         else if (todaysMonth === month){\n            if(todaysDay >= day){\n                return true;\n        }else{\n            return false;\n            }\n        }\n    }\n        return false;\n}\n\nexport const validateEmail = (value:string ):boolean =>{\n    if(!value.toLocaleLowerCase().match(\n        /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n    )){\n        return false;\n    }\n    return true;\n}\n\nexport const validatePhone = (phone:string):boolean => {\n    let stripped = phone.replace(/[^0-9]/ig, \" \")\n}"],"mappings":"AAGA;AACA,OAAO,MAAMA,YAAY,GAAIC,KAAY,IAAa;EAClD,OAAOA,KAAK,KAAK,EAAE;AACvB,CAAC;AAAAC,EAAA,GAFYF,YAAY;AAIzB,OAAO,MAAMG,WAAW,GAAIC,GAAO,IAAY;EAC3C,IAAI;IAACC,KAAK;IAAEC,GAAG;IAAEC;EAAI,CAAC,GAAGH,GAAG;EAE5B,IAAII,SAAkB,GAAG,EAAE;EAE3B,KAAI,IAAIC,CAAC,GAAC,IAAI,EAAEA,CAAC,GAAC,IAAI,EAAEA,CAAC,IAAE,CAAC,EAAC;IACzBD,SAAS,CAACE,IAAI,CAACD,CAAC,CAAC;EACrB;EACA,IAAG,CAACJ,KAAK,IAAI,CAACC,GAAG,IAAG,CAACC,IAAI,EAAC;IACtB,OAAO,KAAK;EAChB,CAAC,MAAK,IAAGF,KAAK,KAAK,CAAC,IAAKC,GAAG,GAAE,EAAE,EAAC;IAC7B,OAAO,KAAK;EAChB,CAAC,MAAK,IAAGD,KAAK,KAAI,CAAC,IAAIC,GAAG,KAAI,EAAE,IAAI,CAACE,SAAS,CAACG,QAAQ,CAACJ,IAAI,CAAC,EAAC;IAC1D,OAAO,KAAK;EAChB,CAAC,MAAK,IAAI,CAACF,KAAK,KAAI,CAAC,IAAIA,KAAK,KAAK,CAAC,IAAIA,KAAK,KAAI,CAAC,IAAIA,KAAK,KAAK,EAAE,KAAKC,GAAG,GAAG,EAAE,EAAC;IAC5E,OAAO,KAAK;EAChB;EACA,OAAOM,QAAQ,CAACR,GAAG,CAAC;AACxB,CAAC;AAGD,MAAMQ,QAAQ,GAAIR,GAAO,IAAa;EAClC,IAAI;IAACC,KAAK;IAAEC,GAAG;IAAEC;EAAI,CAAC,GAAGH,GAAG;EAE5B,IAAIS,KAAK,GAAG,IAAIC,IAAI,CAAC,CAAC;EACtB,IAAIC,UAAU,GAAGF,KAAK,CAACG,WAAW,CAAC,CAAC;EACpC,IAAIC,WAAW,GAAGJ,KAAK,CAACK,QAAQ,CAAC,CAAC;EAClC,IAAIC,SAAS,GAAGN,KAAK,CAACO,OAAO,CAAC,CAAC;EAE/B,IAAGL,UAAU,GAAGR,IAAI,GAAG,EAAE,EAAC;IACtB,OAAO,IAAI;EACf,CAAC,MACI,IAAIQ,UAAU,GAAGR,IAAI,KAAK,EAAE,EAAC;IAC9B,IAAGU,WAAW,GAAGZ,KAAK,EAAC;MACnB,OAAO,IAAI;IACf,CAAC,MACK,IAAIY,WAAW,KAAKZ,KAAK,EAAC;MAC5B,IAAGc,SAAS,IAAIb,GAAG,EAAC;QAChB,OAAO,IAAI;MACnB,CAAC,MAAI;QACD,OAAO,KAAK;MACZ;IACJ;EACJ;EACI,OAAO,KAAK;AACpB,CAAC;AAED,OAAO,MAAMe,aAAa,GAAIpB,KAAY,IAAa;EACnD,IAAG,CAACA,KAAK,CAACqB,iBAAiB,CAAC,CAAC,CAACC,KAAK,CAC/B,uJACJ,CAAC,EAAC;IACE,OAAO,KAAK;EAChB;EACA,OAAO,IAAI;AACf,CAAC;AAED,OAAO,MAAMC,aAAa,GAAIC,KAAY,IAAa;EACnD,IAAIC,QAAQ,GAAGD,KAAK,CAACE,OAAO,CAAC,UAAU,EAAE,GAAG,CAAC;AACjD,CAAC;AAAA,IAAAzB,EAAA;AAAA0B,YAAA,CAAA1B,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}