{"ast":null,"code":"export const determineStyledInputBorder = props => {\n  let {\n    active,\n    valid,\n    theme\n  } = props;\n  if (!active && valid) {\n    return `1px solid ${theme.colors.gray}`;\n  }\n  if (!active && !valid) {\n    return `1px solid ${theme.colors.error}`;\n  }\n  if (active && valid) {\n    return `2px solid ${theme.colors.blue}`;\n  }\n  if (active && !valid) {\n    return `2px solid ${theme.colors.error}`;\n  }\n  return \" \";\n};\nexport const determineLabelColor = props => {\n  let {\n    active,\n    valid,\n    theme,\n    color\n  } = props;\n  if (color && color === \"error\") {\n    return theme.colors.error;\n  }\n  if (color && color === 'blue') {\n    return theme.colors.blue;\n  }\n  return theme.colors.lightGray;\n};\nexport const determineValidatedStyles = (state, validator) => {\n  let {\n    valid,\n    active,\n    typedIn,\n    value,\n    labelColor,\n    labelActive\n  } = state;\n  if (typedIn) {\n    valid = validator(value);\n    if (active && valid) {\n      labelActive = true;\n      labelColor = \"blue\";\n    }\n    if (active && !valid) {\n      labelActive = true;\n      labelColor = \"error\";\n    }\n    if (!active && valid) {\n      labelActive = true;\n      labelColor = \"gray\";\n    }\n    if (!active && !valid) {\n      labelActive = false;\n      labelColor = \"gray\";\n    }\n  } else {\n    if (active) {\n      labelActive = true;\n      labelColor = \"blue\";\n    } else {\n      labelActive = false;\n      labelColor = \"gray\";\n    }\n  }\n  state = {\n    ...state,\n    valid,\n    labelActive,\n    labelColor\n  };\n  return state;\n};","map":{"version":3,"names":["determineStyledInputBorder","props","active","valid","theme","colors","gray","error","blue","determineLabelColor","color","lightGray","determineValidatedStyles","state","validator","typedIn","value","labelColor","labelActive"],"sources":["/Users/nana/Desktop/twitterApp/frontend/src/utils/DetermineStyleUtils.ts"],"sourcesContent":["\nimport { StyledInputProps, ValidatedInputState } from \"./GlobalInterfaces\";\n\n\nexport const determineStyledInputBorder = (props: StyledInputProps): string =>{\n    let {active, valid, theme} = props;\n    if(!active && valid){\n        return `1px solid ${theme.colors.gray}`;\n    }\n    if(!active && !valid){\n        return `1px solid ${theme.colors.error}`;\n    }\n    if(active && valid){\n        return `2px solid ${theme.colors.blue}`;\n    }\n    if(active && !valid){\n        return `2px solid ${theme.colors.error}`;\n    }\n\n\n    return \" \";\n}\n\n\n\nexport const determineLabelColor = (props: StyledInputProps): string =>{\n    let {active, valid, theme, color} = props;\n    \n    if(color && color === \"error\"){\n        return theme.colors.error;\n    }\n    if(color && color === 'blue'){\n        return theme.colors.blue;\n    }\n\n    return theme.colors.lightGray\n}\n\n\nexport const determineValidatedStyles = (state: ValidatedInputState, validator:(value: string) =>boolean): ValidatedInputState =>{\n    let {valid, active, typedIn, value, labelColor, labelActive} = state;\n\n    if(typedIn){\n        valid = validator(value);\n\n        if(active && valid){\n            labelActive = true;\n            labelColor = \"blue\";\n        }\n\n        if(active && !valid){\n            labelActive = true;\n            labelColor = \"error\";\n        }\n        if(!active && valid){\n            labelActive = true;\n            labelColor = \"gray\";\n        }\n        if(!active && !valid){\n            labelActive = false;\n            labelColor = \"gray\";\n\n        }\n    }else{\n        if(active){\n            labelActive = true;\n            labelColor = \"blue\";\n        }else{\n            labelActive = false;\n            labelColor = \"gray\";\n        }\n    }\n    state = {\n        ...state,\n        valid,\n        labelActive,\n        labelColor,\n\n    };\n    return state;\n}"],"mappings":"AAIA,OAAO,MAAMA,0BAA0B,GAAIC,KAAuB,IAAY;EAC1E,IAAI;IAACC,MAAM;IAAEC,KAAK;IAAEC;EAAK,CAAC,GAAGH,KAAK;EAClC,IAAG,CAACC,MAAM,IAAIC,KAAK,EAAC;IAChB,OAAQ,aAAYC,KAAK,CAACC,MAAM,CAACC,IAAK,EAAC;EAC3C;EACA,IAAG,CAACJ,MAAM,IAAI,CAACC,KAAK,EAAC;IACjB,OAAQ,aAAYC,KAAK,CAACC,MAAM,CAACE,KAAM,EAAC;EAC5C;EACA,IAAGL,MAAM,IAAIC,KAAK,EAAC;IACf,OAAQ,aAAYC,KAAK,CAACC,MAAM,CAACG,IAAK,EAAC;EAC3C;EACA,IAAGN,MAAM,IAAI,CAACC,KAAK,EAAC;IAChB,OAAQ,aAAYC,KAAK,CAACC,MAAM,CAACE,KAAM,EAAC;EAC5C;EAGA,OAAO,GAAG;AACd,CAAC;AAID,OAAO,MAAME,mBAAmB,GAAIR,KAAuB,IAAY;EACnE,IAAI;IAACC,MAAM;IAAEC,KAAK;IAAEC,KAAK;IAAEM;EAAK,CAAC,GAAGT,KAAK;EAEzC,IAAGS,KAAK,IAAIA,KAAK,KAAK,OAAO,EAAC;IAC1B,OAAON,KAAK,CAACC,MAAM,CAACE,KAAK;EAC7B;EACA,IAAGG,KAAK,IAAIA,KAAK,KAAK,MAAM,EAAC;IACzB,OAAON,KAAK,CAACC,MAAM,CAACG,IAAI;EAC5B;EAEA,OAAOJ,KAAK,CAACC,MAAM,CAACM,SAAS;AACjC,CAAC;AAGD,OAAO,MAAMC,wBAAwB,GAAGA,CAACC,KAA0B,EAAEC,SAAmC,KAAyB;EAC7H,IAAI;IAACX,KAAK;IAAED,MAAM;IAAEa,OAAO;IAAEC,KAAK;IAAEC,UAAU;IAAEC;EAAW,CAAC,GAAGL,KAAK;EAEpE,IAAGE,OAAO,EAAC;IACPZ,KAAK,GAAGW,SAAS,CAACE,KAAK,CAAC;IAExB,IAAGd,MAAM,IAAIC,KAAK,EAAC;MACfe,WAAW,GAAG,IAAI;MAClBD,UAAU,GAAG,MAAM;IACvB;IAEA,IAAGf,MAAM,IAAI,CAACC,KAAK,EAAC;MAChBe,WAAW,GAAG,IAAI;MAClBD,UAAU,GAAG,OAAO;IACxB;IACA,IAAG,CAACf,MAAM,IAAIC,KAAK,EAAC;MAChBe,WAAW,GAAG,IAAI;MAClBD,UAAU,GAAG,MAAM;IACvB;IACA,IAAG,CAACf,MAAM,IAAI,CAACC,KAAK,EAAC;MACjBe,WAAW,GAAG,KAAK;MACnBD,UAAU,GAAG,MAAM;IAEvB;EACJ,CAAC,MAAI;IACD,IAAGf,MAAM,EAAC;MACNgB,WAAW,GAAG,IAAI;MAClBD,UAAU,GAAG,MAAM;IACvB,CAAC,MAAI;MACDC,WAAW,GAAG,KAAK;MACnBD,UAAU,GAAG,MAAM;IACvB;EACJ;EACAJ,KAAK,GAAG;IACJ,GAAGA,KAAK;IACRV,KAAK;IACLe,WAAW;IACXD;EAEJ,CAAC;EACD,OAAOJ,KAAK;AAChB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}