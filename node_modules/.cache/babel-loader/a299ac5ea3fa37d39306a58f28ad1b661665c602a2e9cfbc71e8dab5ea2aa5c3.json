{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nconst initialState = {\n  loading: false,\n  error: false,\n  firstName: '',\n  firstNameValid: false,\n  lastName: '',\n  lastNameValid: false,\n  email: '',\n  emailValid: false,\n  dob: {\n    month: 0,\n    day: 0,\n    year: 0\n  },\n  dobValid: false,\n  step: 1\n};\n\n//Making API Request to the register server 8050\nexport const registerUser = createAsyncThunk('register/register', async (user, thunkAPI) => {\n  try {\n    const req = await axios.post('http://localhost:8050/auth/register', user);\n    return await req.data;\n  } catch (e) {\n    return thunkAPI.rejectWithValue(e);\n    console.log(\"Unable to register user\");\n  }\n});\nexport const RegisterSlice = createSlice({\n  name: \"register\",\n  initialState,\n  reducers: {\n    updateRegister(state, action) {\n      let {\n        name,\n        value\n      } = action.payload;\n      if (name === 'month' || name === 'day' || name === 'year') {\n        let dob = state.dob;\n        dob = {\n          ...dob,\n          [name]: value\n        };\n        state = {\n          ...state,\n          dob\n        };\n      } else {\n        state = {\n          ...state,\n          [name]: value\n        };\n      }\n      console.log('Updating the global register state:', state);\n      return state;\n    },\n    incrementStep(state) {\n      state.step++;\n      return state;\n    },\n    decrementStep(state) {\n      if (state.step === 1 || state.step === 4 || state.step >= 6) {\n        return state;\n      } else {\n        state.step--;\n        return state;\n      }\n    }\n  },\n  //Function to hold cases or things that happenes when request is made eg: pending..\n  extraReducers: builder => {\n    builder.addCase(registerUser.pending, (state, action) => {\n      state.loading = true;\n      return state;\n    });\n    builder.addCase(registerUser.fulfilled, (state, action) => {\n      state.loading = false;\n      state.error = false;\n      state.step++;\n      return state;\n    });\n    builder.addCase(registerUser.rejected, (state, action) => {\n      state.error = true;\n      state.loading = false;\n      return state;\n    });\n  }\n});\nexport const {\n  updateRegister,\n  incrementStep,\n  decrementStep\n} = RegisterSlice.actions;\nexport default RegisterSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","axios","initialState","loading","error","firstName","firstNameValid","lastName","lastNameValid","email","emailValid","dob","month","day","year","dobValid","step","registerUser","user","thunkAPI","req","post","data","e","rejectWithValue","console","log","RegisterSlice","name","reducers","updateRegister","state","action","value","payload","incrementStep","decrementStep","extraReducers","builder","addCase","pending","fulfilled","rejected","actions","reducer"],"sources":["/Users/nana/Desktop/twitterApp/frontend/src/redux/Slices/RegisterSlice.ts"],"sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Dob } from \"../../utils/GlobalInterfaces\";\nimport axios from \"axios\";\n\n\ninterface RegisterSliceState {\n    loading: boolean;\n    error: boolean;\n    firstName: string;\n    firstNameValid: boolean;\n    lastName: string;\n    lastNameValid:boolean;\n    email:string;\n    emailValid: boolean;\n    dob:Dob;\n    dobValid: boolean;\n    step: number;\n}\n\n\ninterface UpdatePayload{\n    name: string;\n    value: string | number | boolean;\n}\n\ninterface RegisterUser {\n    firstName:string;\n    lastName:string;\n    email:string;\n    dob:string;\n}\n\nconst initialState:RegisterSliceState = {\n    loading:false,\n    error: false,\n    firstName: '',\n    firstNameValid:  false,\n    lastName: '',\n    lastNameValid: false,\n    email: '',\n    emailValid: false,\n    dob: {\n        month : 0,\n        day: 0,\n        year: 0\n    }, \n    dobValid: false,\n    step: 1\n}\n\n//Making API Request to the register server 8050\nexport const registerUser = createAsyncThunk(\n    'register/register',\n    async(user:RegisterUser, thunkAPI) => {\n        try{\n            const req = await axios.post('http://localhost:8050/auth/register', user);\n            return await req.data;\n        }\n        catch (e){\n            return thunkAPI.rejectWithValue(e);\n            console.log(\"Unable to register user\");\n        }\n    }\n)\n\n\nexport const RegisterSlice = createSlice ({\n    name: \"register\",\n    initialState,\n    reducers:{\n        updateRegister(state, action:PayloadAction<UpdatePayload>){\n            let {name, value} = action.payload;\n\n            if(name === 'month' || name === 'day' || name === 'year'){\n                let dob = state.dob;\n                dob = {\n                    ...dob,\n                    [name]:value\n                }\n                state = {\n                    ...state,\n                    dob\n                };\n            }else{\n                state = {\n                    ...state,\n                    [name]: value\n                }\n            }\n            console.log('Updating the global register state:', state); \n            return state;\n        },\n\n        incrementStep(state){\n            state.step++;\n            return state;\n        },\n        decrementStep(state){\n            if (state.step === 1 || state.step === 4|| state.step >= 6){\n                return state;\n            }else{\n                state.step --;\n                return state;\n            }\n        }\n    },\n\n    //Function to hold cases or things that happenes when request is made eg: pending..\n    extraReducers: (builder) => {\n        builder.addCase(registerUser.pending, (state, action) =>{\n            state.loading = true;\n            return state;\n        });\n\n        builder.addCase(registerUser.fulfilled, (state, action) => {\n            state.loading = false;\n            state.error =false;\n            state.step++;\n            return state;\n        });\n\n        builder.addCase(registerUser.rejected, (state, action) =>{\n            state.error = true;\n            state.loading = false;\n            return state;\n        })\n    }\n});\n\n\nexport const {updateRegister, incrementStep, decrementStep } = RegisterSlice.actions;\n\nexport default RegisterSlice.reducer;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}